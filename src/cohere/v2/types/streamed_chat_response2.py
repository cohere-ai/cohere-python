# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions

from ...core.pydantic_utilities import IS_PYDANTIC_V2
from ...core.unchecked_base_model import UncheckedBaseModel, UnionMetadata
from .chat_content_delta_event_delta import ChatContentDeltaEventDelta
from .chat_content_start_event_delta import ChatContentStartEventDelta
from .chat_message_end_event_delta import ChatMessageEndEventDelta
from .chat_message_start_event_delta import ChatMessageStartEventDelta
from .chat_tool_call_delta_event_delta import ChatToolCallDeltaEventDelta
from .chat_tool_call_start_event_delta import ChatToolCallStartEventDelta
from .chat_tool_plan_delta_event_delta import ChatToolPlanDeltaEventDelta


class StreamedChatResponse2_MessageStart(UncheckedBaseModel):
    """
    StreamedChatResponse is returned in streaming mode (specified with `stream=True` in the request).
    """

    id: typing.Optional[str] = None
    delta: typing.Optional[ChatMessageStartEventDelta] = None
    type: typing.Literal["message-start"] = "message-start"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class StreamedChatResponse2_ContentStart(UncheckedBaseModel):
    """
    StreamedChatResponse is returned in streaming mode (specified with `stream=True` in the request).
    """

    index: typing.Optional[int] = None
    delta: typing.Optional[ChatContentStartEventDelta] = None
    type: typing.Literal["content-start"] = "content-start"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class StreamedChatResponse2_ContentDelta(UncheckedBaseModel):
    """
    StreamedChatResponse is returned in streaming mode (specified with `stream=True` in the request).
    """

    index: typing.Optional[int] = None
    delta: typing.Optional[ChatContentDeltaEventDelta] = None
    type: typing.Literal["content-delta"] = "content-delta"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class StreamedChatResponse2_ContentEnd(UncheckedBaseModel):
    """
    StreamedChatResponse is returned in streaming mode (specified with `stream=True` in the request).
    """

    index: typing.Optional[int] = None
    type: typing.Literal["content-end"] = "content-end"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class StreamedChatResponse2_ToolPlanDelta(UncheckedBaseModel):
    """
    StreamedChatResponse is returned in streaming mode (specified with `stream=True` in the request).
    """

    delta: typing.Optional[ChatToolPlanDeltaEventDelta] = None
    type: typing.Literal["tool-plan-delta"] = "tool-plan-delta"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class StreamedChatResponse2_ToolCallStart(UncheckedBaseModel):
    """
    StreamedChatResponse is returned in streaming mode (specified with `stream=True` in the request).
    """

    index: typing.Optional[int] = None
    delta: typing.Optional[ChatToolCallStartEventDelta] = None
    type: typing.Literal["tool-call-start"] = "tool-call-start"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class StreamedChatResponse2_ToolCallDelta(UncheckedBaseModel):
    """
    StreamedChatResponse is returned in streaming mode (specified with `stream=True` in the request).
    """

    index: typing.Optional[int] = None
    delta: typing.Optional[ChatToolCallDeltaEventDelta] = None
    type: typing.Literal["tool-call-delta"] = "tool-call-delta"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class StreamedChatResponse2_ToolCallEnd(UncheckedBaseModel):
    """
    StreamedChatResponse is returned in streaming mode (specified with `stream=True` in the request).
    """

    index: typing.Optional[int] = None
    type: typing.Literal["tool-call-end"] = "tool-call-end"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class StreamedChatResponse2_MessageEnd(UncheckedBaseModel):
    """
    StreamedChatResponse is returned in streaming mode (specified with `stream=True` in the request).
    """

    id: typing.Optional[str] = None
    delta: typing.Optional[ChatMessageEndEventDelta] = None
    type: typing.Literal["message-end"] = "message-end"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


StreamedChatResponse2 = typing_extensions.Annotated[
    typing.Union[
        StreamedChatResponse2_MessageStart,
        StreamedChatResponse2_ContentStart,
        StreamedChatResponse2_ContentDelta,
        StreamedChatResponse2_ContentEnd,
        StreamedChatResponse2_ToolPlanDelta,
        StreamedChatResponse2_ToolCallStart,
        StreamedChatResponse2_ToolCallDelta,
        StreamedChatResponse2_ToolCallEnd,
        StreamedChatResponse2_MessageEnd,
    ],
    UnionMetadata(discriminant="type"),
]
