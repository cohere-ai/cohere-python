# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions

from ...core.pydantic_utilities import IS_PYDANTIC_V2
from ...core.unchecked_base_model import UncheckedBaseModel, UnionMetadata


class Content_Text(UncheckedBaseModel):
    """
    A Content block which contains information about the content type and the content itself.
    """

    text: str
    type: typing.Literal["text"] = "text"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Content_Document(UncheckedBaseModel):
    """
    A Content block which contains information about the content type and the content itself.
    """

    id: str
    document: typing.Dict[str, typing.Any]
    type: typing.Literal["document"] = "document"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


Content = typing_extensions.Annotated[typing.Union[Content_Text, Content_Document], UnionMetadata(discriminant="type")]
