# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from .base_type import BaseType
from .strategy import Strategy

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class BaseModel(pydantic.BaseModel):
    """
    The base model used for fine-tuning.
    """

    name: typing.Optional[str] = pydantic.Field(default=None)
    """
    The name of the base model.
    """

    version: typing.Optional[str] = pydantic.Field(default=None)
    """
    read-only. The version of the base model.
    """

    base_type: BaseType = pydantic.Field()
    """
    The type of the base model.
    """

    strategy: typing.Optional[Strategy] = pydantic.Field(default=None)
    """
    The fine-tuning strategy.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
