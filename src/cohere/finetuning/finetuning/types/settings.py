# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from .base_model import BaseModel
from .hyperparameters import Hyperparameters

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class Settings(pydantic.BaseModel):
    """
    The configuration used for fine-tuning.
    """

    base_model: BaseModel = pydantic.Field()
    """
    The base model to fine-tune.
    """

    dataset_id: str = pydantic.Field()
    """
    The data used for training and evaluating the fine-tuned model.
    """

    hyperparameters: typing.Optional[Hyperparameters] = pydantic.Field(default=None)
    """
    Fine-tuning hyper-parameters.
    """

    multi_label: typing.Optional[bool] = pydantic.Field(default=None)
    """
    read-only. Whether the model is single-label or multi-label (only for classification).
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
