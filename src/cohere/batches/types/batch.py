# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2
from ...core.unchecked_base_model import UncheckedBaseModel
from .batch_status import BatchStatus


class Batch(UncheckedBaseModel):
    """
    This resource represents a batch job.
    """

    id: typing.Optional[str] = pydantic.Field(default=None)
    """
    read-only. Batch ID.
    """

    name: str = pydantic.Field()
    """
    Batch name (e.g. `foobar`).
    """

    creator_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    read-only. User ID of the creator.
    """

    org_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    read-only. Organization ID.
    """

    status: typing.Optional[BatchStatus] = pydantic.Field(default=None)
    """
    read-only. Current stage in the life-cycle of the batch.
    """

    created_at: typing.Optional[dt.datetime] = pydantic.Field(default=None)
    """
    read-only. Creation timestamp.
    """

    updated_at: typing.Optional[dt.datetime] = pydantic.Field(default=None)
    """
    read-only. Latest update timestamp.
    """

    input_dataset_id: str = pydantic.Field()
    """
    ID of the dataset the batch reads inputs from.
    """

    output_dataset_id: typing.Optional[str] = None
    input_tokens: typing.Optional[str] = pydantic.Field(default=None)
    """
    read-only. The total number of input tokens in the batch.
    """

    output_tokens: typing.Optional[str] = pydantic.Field(default=None)
    """
    read-only. The total number of output tokens in the batch.
    """

    model: str = pydantic.Field()
    """
    The name of the model the batch uses.
    """

    num_records: typing.Optional[int] = pydantic.Field(default=None)
    """
    read-only. The total number of records in the batch.
    """

    num_successful_records: typing.Optional[int] = pydantic.Field(default=None)
    """
    read-only. The current number of successful records in the batch.
    """

    num_failed_records: typing.Optional[int] = pydantic.Field(default=None)
    """
    read-only. The current number of failed records in the batch.
    """

    status_reason: typing.Optional[str] = pydantic.Field(default=None)
    """
    read-only. More details about the reason for the status of a batch job.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            smart_union = True
            extra = pydantic.Extra.allow
