# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ..core.unchecked_base_model import UncheckedBaseModel
import typing
from .embedding_type import EmbeddingType
from .texts_truncate import TextsTruncate
from ..core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic
import typing_extensions
from ..core.unchecked_base_model import UnionMetadata


class SearchDocumentV2EmbedRequest(UncheckedBaseModel):
    input_type: typing.Literal["search_document"] = "search_document"
    texts: typing.List[str]
    model: str
    embedding_types: typing.Optional[typing.List[EmbeddingType]] = None
    truncate: typing.Optional[TextsTruncate] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class SearchQueryV2EmbedRequest(UncheckedBaseModel):
    input_type: typing.Literal["search_query"] = "search_query"
    texts: typing.List[str]
    model: str
    embedding_types: typing.Optional[typing.List[EmbeddingType]] = None
    truncate: typing.Optional[TextsTruncate] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class ClassificationV2EmbedRequest(UncheckedBaseModel):
    input_type: typing.Literal["classification"] = "classification"
    texts: typing.List[str]
    model: str
    embedding_types: typing.Optional[typing.List[EmbeddingType]] = None
    truncate: typing.Optional[TextsTruncate] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class ClusteringV2EmbedRequest(UncheckedBaseModel):
    input_type: typing.Literal["clustering"] = "clustering"
    texts: typing.List[str]
    model: str
    embedding_types: typing.Optional[typing.List[EmbeddingType]] = None
    truncate: typing.Optional[TextsTruncate] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class ImageV2EmbedRequest(UncheckedBaseModel):
    input_type: typing.Literal["image"] = "image"
    images: typing.List[str]
    model: str
    embedding_types: typing.Optional[typing.List[EmbeddingType]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


V2EmbedRequest = typing_extensions.Annotated[
    typing.Union[
        SearchDocumentV2EmbedRequest,
        SearchQueryV2EmbedRequest,
        ClassificationV2EmbedRequest,
        ClusteringV2EmbedRequest,
        ImageV2EmbedRequest,
    ],
    UnionMetadata(discriminant="input_type"),
]
