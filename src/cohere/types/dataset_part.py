# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime

if pydantic.VERSION.startswith("2."):
    import pydantic.v1 as pydantic  # type: ignore
else:
    import pydantic  # type: ignore


class DatasetPart(pydantic.BaseModel):
    id: str = pydantic.Field()
    """
    The dataset part ID
    """

    name: str = pydantic.Field()
    """
    The name of the dataset part
    """

    url: typing.Optional[str] = pydantic.Field(default=None)
    """
    The download url of the file
    """

    index: typing.Optional[int] = pydantic.Field(default=None)
    """
    The index of the file
    """

    size_bytes: typing.Optional[int] = pydantic.Field(default=None)
    """
    The size of the file in bytes
    """

    num_rows: typing.Optional[int] = pydantic.Field(default=None)
    """
    The number of rows in the file
    """

    original_url: typing.Optional[str] = pydantic.Field(default=None)
    """
    The download url of the original file
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
