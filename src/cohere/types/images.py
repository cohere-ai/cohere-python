# This file was auto-generated by Fern from our API Definition.

from ..core.unchecked_base_model import UncheckedBaseModel
import typing
import pydantic
from .embedding_type import EmbeddingType
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class Images(UncheckedBaseModel):
    images: typing.List[str] = pydantic.Field()
    """
    An array of image data URIs for the model to embed. Maximum number of images per call is `1`.
    The image must be a valid [data URI](https://developer.mozilla.org/en-US/docs/Web/URI/Schemes/data). The image must be in either `image/jpeg` or `image/png` format and has a maximum size of 5MB.
    """

    model: str = pydantic.Field()
    """
    Defaults to embed-english-v2.0
    The identifier of the model. Smaller "light" models are faster, while larger models will perform better. [Custom models](/docs/training-custom-models) can also be supplied with their full ID.
    Available models and corresponding embedding dimensions:
    
    - `embed-english-v3.0` 1024
    - `embed-multilingual-v3.0` 1024
    - `embed-english-light-v3.0` 384
    - `embed-multilingual-light-v3.0` 384
    - `embed-english-v2.0` 4096
    - `embed-english-light-v2.0` 1024
    - `embed-multilingual-v2.0` 768
    """

    embedding_types: typing.Optional[typing.List[EmbeddingType]] = pydantic.Field(default=None)
    """
    Specifies the types of embeddings you want to get back. Not required and default is None, which returns the Embed Floats response type. Can be one or more of the following types.
    
    - `"float"`: Use this when you want to get back the default float embeddings. Valid for all models.
    - `"int8"`: Use this when you want to get back signed int8 embeddings. Valid for only v3 models.
    - `"uint8"`: Use this when you want to get back unsigned int8 embeddings. Valid for only v3 models.
    - `"binary"`: Use this when you want to get back signed binary embeddings. Valid for only v3 models.
    - `"ubinary"`: Use this when you want to get back unsigned binary embeddings. Valid for only v3 models.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
