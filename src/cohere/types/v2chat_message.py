# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ..core.unchecked_base_model import UncheckedBaseModel
import typing
from .user_message_content import UserMessageContent
from ..core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic
from .v2tool_call import V2ToolCall
from .assistant_message_content import AssistantMessageContent
from .citation import Citation
from .system_message_content import SystemMessageContent
from .v2tool_message_tool_content import V2ToolMessageToolContent
import typing_extensions
from ..core.unchecked_base_model import UnionMetadata


class UserV2ChatMessage(UncheckedBaseModel):
    """
    Represents a single message in the chat history from a given role.
    """

    role: typing.Literal["user"] = "user"
    content: UserMessageContent

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AssistantV2ChatMessage(UncheckedBaseModel):
    """
    Represents a single message in the chat history from a given role.
    """

    role: typing.Literal["assistant"] = "assistant"
    tool_calls: typing.Optional[typing.List[V2ToolCall]] = None
    tool_plan: typing.Optional[str] = None
    content: typing.Optional[AssistantMessageContent] = None
    citations: typing.Optional[typing.List[Citation]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class SystemV2ChatMessage(UncheckedBaseModel):
    """
    Represents a single message in the chat history from a given role.
    """

    role: typing.Literal["system"] = "system"
    content: SystemMessageContent

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class ToolV2ChatMessage(UncheckedBaseModel):
    """
    Represents a single message in the chat history from a given role.
    """

    role: typing.Literal["tool"] = "tool"
    tool_call_id: str
    tool_content: V2ToolMessageToolContent

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


V2ChatMessage = typing_extensions.Annotated[
    typing.Union[UserV2ChatMessage, AssistantV2ChatMessage, SystemV2ChatMessage, ToolV2ChatMessage],
    UnionMetadata(discriminant="role"),
]
