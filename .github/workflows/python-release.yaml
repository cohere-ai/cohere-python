name: Python Release

on:
  push:
    branches:
     - "*"
    # tags:
    #   - v*

env:
  PYPI_TOKEN: ${{ secrets.PYPI_TOKEN_DIST }}
  DIST_DIR: ${{ github.sha }}

jobs:

  # create_wheels_manylinux_2014_ppc64le:
  #   runs-on: ubuntu-latest
  #   name: Create wheels for manylinux2014 - PowerPC
  #   steps:
  #     - uses: actions/checkout@v1

  #     - name: Upgrade libssl
  #       run: sudo apt-get install -y libssl-dev

  #     - name: Pull images
  #       run: |
  #         docker pull multiarch/qemu-user-static
  #         docker pull quay.io/pypa/manylinux2014_ppc64le:latest

  #     - name: Install QEMU
  #       run: |
  #         docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

  #     - name: Build and audit wheels
  #       working-directory: ./
  #       run: |
  #         docker run -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION -e DIST_DIR \
  #           --rm -v `pwd`/../..:/io quay.io/pypa/manylinux2014_ppc64le \
  #           /bin/bash -c "yum install -y openssl-devel && cd /io/bindings/python; sh ./scripts/build-wheels.sh"

  # create_wheels_manylinux_2014_aarch64:
  #   runs-on: ubuntu-latest
  #   name: Create wheels for manylinux2014 - Aarch64
  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Upgrade libssl
  #       run: sudo apt-get install -y libssl-dev

  #     - name: Pull images
  #       run: |
  #         docker pull multiarch/qemu-user-static
  #         docker pull quay.io/pypa/manylinux2014_aarch64:latest

  #     - name: Install QEMU
  #       run: |
  #         docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

  #     - name: Build and audit wheels
  #       working-directory: ./
  #       run: |
  #         docker run -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION -e DIST_DIR \
  #           --rm -v `pwd`/../..:/io quay.io/pypa/manylinux2014_aarch64 \
  #           /bin/bash -c "yum install -y openssl-devel && cd /io/bindings/python; sh ./scripts/build-wheels.sh"

  # create_wheels_manylinux_2014_x390x:
  #   runs-on: ubuntu-latest
  #   name: Create wheels for manylinux2014 - S390X
  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Upgrade libssl
  #       run: sudo apt-get install -y libssl-dev

  #     - name: Pull images
  #       run: |
  #         docker pull multiarch/qemu-user-static
  #         docker pull quay.io/pypa/manylinux2014_s390x:latest

  #     - name: Install QEMU
  #       run: |
  #         docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

  #     - name: Build and audit wheels
  #       working-directory: ./
  #       run: |
  #         docker run -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION -e DIST_DIR \
  #           --rm -v `pwd`/../..:/io quay.io/pypa/manylinux2014_s390x \
  #           /bin/bash -c "yum install -y openssl-devel && cd /io/bindings/python; sh ./scripts/build-wheels.sh"

  create_wheels_manylinux:
    runs-on: ubuntu-latest
    name: Create wheels for manylinux2010
    container: quay.io/pypa/manylinux2010_x86_64
    steps:
      # v1 is required when using manylinux2010
      - uses: actions/checkout@v1

      - name: Install dependencies
        run: yum install -y openssl-devel wget tar

      - name: Install Python 3.6
        run: wget https://www.python.org/ftp/python/3.6.15/Python-3.6.15.tgz && \
            tar xzf Python-3.6.15.tgz && \
            cd Python-3.6.15 && \
            ./configure --enable-optimizations && \
            make altinstall

      - name: Build and audit wheels
        working-directory: ./
        run: sh ./scripts/build-wheels.sh
  
  # create_wheels_windows_32bit:
  #   name: Create wheels for windows 32-bit
  #   runs-on: windows-latest
  #   strategy:
  #     matrix:
  #       python: ["3.7", "3.8", "3.9", "3.10"]
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v2

  #     - name: Install Python
  #       uses: actions/setup-python@v1
  #       with:
  #         python-version: ${{ matrix.python }}
  #         architecture: x86

  #     - name: Install dependencies
  #       run: |
  #         # On old versions of python there is an old version of setuptools already installed
  #         pip install setuptools wheel --ignore-installed --force-reinstall

  #     - name: Build wheel
  #       working-directory: ./
  #       run: python setup.py bdist_wheel

  #     - name: Upload wheels
  #       shell: bash
  #       run: |
  #         wget -c https://storage.googleapis.com/pub/gsutil.tar.gz
  #         tar xfz gsutil.tar.gz -C $HOME
  #         $HOME/gsutil/gsutil cp -r ./dist "gs://"



  # create_wheels_others_64bit:
  #   name: Create wheels for other OSes
  #   env:
  #     MACOSX_DEPLOYMENT_TARGET: 10.11
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       os: [windows-latest, macos-10.15]
  #       python: ["3.7", "3.8", "3.9", "3.10"]
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v2

  #     - name: Install Go
  #       uses: actions/setup-go@v2
  #       with:
  #         go-version: '1.17.6'

  #     - name: Install Python
  #       uses: actions/setup-python@v1
  #       with:
  #         python-version: ${{ matrix.python }}
  #         architecture: x64

  #     - name: Install Python dependencies
  #       run: |
  #         # On old versions of python there is an old version of setuptools already installed
  #         pip install setuptools wheel pybindgen --ignore-installed --force-reinstall
      
  #     - name: Install Go dependencies
  #       run: |
  #         go get golang.org/x/tools/cmd/goimports
  #         go get github.com/go-python/gopy

  #     - name: Generate gopy Files
  #       run: |
  #         gopy build -output=tokenizer -vm=python3 github.com/cohere-ai/tokenizer

  #     - name: Build wheel
  #       working-directory: ./
  #       run: python setup.py bdist_wheel

  #     - name: Rename wheels
  #       shell: bash
  #       working-directory: ./dist
  #       run: for file in *.whl ; do mv $file ${file//macosx_10_1[0-9]/macosx_10_11} ; done

  #     - name: Upload wheels
  #       shell: bash
  #       run: |
  #         pip install awscli
  #         aws s3 sync --exact-timestamps ./bindings/python/dist "s3://tokenizers-releases/python/$DIST_DIR"

  upload_package:
    name: Upload package to PyPi
    runs-on: ubuntu-latest
    needs: 
      - create_wheels_manylinux
      # - create_wheels_manylinux_2014_ppc64le
      # - create_wheels_manylinux_2014_aarch64
      # - create_wheels_manylinux_2014_x390x
      # - create_wheels_windows_32bit
      # - create_wheels_others_64bit

    steps:
      - uses: actions/checkout@v1

      - name: Install Python
        uses: actions/setup-python@v1

      - name: Retrieve all wheels
        shell: bash
        run: |
          pip install awscli
          aws s3 sync "s3://tokenizers-releases/python/$DIST_DIR" ./dist

      - name: Install dependencies
        run: |
          pip install setuptools wheel

      - name: Create source distribution
        working-directory: ./
        run: sh ./scripts/build-sdist.sh

      - name: Upload to PyPi
        working-directory: ./
        run: |
          pip install twine
          python -m twine upload dist/* -u __token__ -p "$PYPI_TOKEN"
